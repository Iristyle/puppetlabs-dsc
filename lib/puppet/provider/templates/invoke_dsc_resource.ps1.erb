$script:ErrorActionPreference = 'Stop'
$PuppetModulesFolder = Join-Path $env:ProgramFiles 'WindowsPowerShell\Modules\PuppetVendoredModules'
if (!(Test-Path($PuppetModulesFolder))) {
  & cmd.exe /c mklink /d "$PuppetModulesFolder" "<%= vendored_modules_path %>" | Out-Null
}

$currentState = Get-DscLocalConfigurationManager

if ($currentState.RefreshMode -ne 'Disabled') {
  $data = [PSCustomObject]@{
    "error" = "DSC LCM RefreshMode must be set to Disabled for Puppet to execute DSC Resources! Please run dsc::lcm_config first"
  } | ConvertTo-Json -Compress
  return $data
}

$invokeParams = @{
  Name          = '<%= resource[:dscmeta_resource_friendly_name] %>'
  Method        = '<%= dsc_invoke_method %>'
  Property      = @{
<% dsc_parameters.each do |p| -%>
    <%- name = p.name.to_s.gsub(/^dsc_/,'')
    value = format_dsc_value(p.value)
    value = '\'present\'' if name == 'ensure' && dsc_invoke_method == 'test'
    -%>
    <%= name %> = <%= value %>
<% end -%>
  }<% if resource.parameters[:dscmeta_module_version] %>
  ModuleName = @{
    ModuleName      = <%= "\"#{resource[:dscmeta_module_name]}\"" %>
    RequiredVersion = <%= "\"#{resource[:dscmeta_module_version]}\"" %>
  }
<% else %>
  ModuleName = <%= "\"#{resource[:dscmeta_module_name]}\"" %>
<% end -%>
}

try{
    $result = Invoke-DscResource @invokeParams
}catch{
  $exc = $_
  $data = [PSCustomObject]@{
    indesiredstate = $false
    rebootrequired = $false
    errormessage   = $_.Exception.Message
  } | ConvertTo-Json -Compress
  return $data
}


# keep the switch for when Test passes back changed properties
switch ($invokeParams.Method) {
  'Test' {
    $data = [PSCustomObject]@{
      indesiredstate = $result.InDesiredState
      rebootrequired = $false
    } | ConvertTo-Json -Compress
    return $data
  }
  'Set' {
    $data = [PSCustomObject]@{
      indesiredstate = $true
      rebootrequired = $result.RebootRequired
    } | ConvertTo-Json -Compress
    return $data
  }
}
